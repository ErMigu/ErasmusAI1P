1-Conflict-Free Sets (Find sets of arguments where no argument attacks another within the set)
% INPUTS
arg(a). arg(b). arg(c). arg(d). arg(e).
att(a, b). att(b, c). att(c, a). att(d,e).

%GEN SETS
{ in(X) : arg(X) }.

%FOR EVERY X,Y IN THE ARG
:- free(X).
free(X):- att(X,Y), in(X), in(Y).

#show in/1.

//---------------------------------

2-Admissible Sets (Find conflict-free sets where each argument is defended against attackers)
% INPUTS
arg(a). arg(b). arg(c). arg(d). arg(e).
att(a, b). att(b, c). att(c, a). att(d,e).

%GEN SETS
{ in(X) : arg(X) }.

%FOR EVERY X,Y IN THE ARG
:- free(X).
free(X):- att(X,Y), in(X), in(Y).

%EVERY ATT IS DEFENDED BY SOMEONE OF THE SET
:- in(X), att(Y, X), not def(X, Y).
def(X, Y) :- in(Z), att(Z,Y), arg(X).

#show in/1.

//---------------------------------

3-Stable Extensions (Find admissible sets that attack every argument not in the set)
% INPUTS
arg(a). arg(b). arg(c). arg(d). arg(e).
att(a, b). att(b, c). att(c, a). att(d,e).

%GEN SETS
{ in(X) : arg(X) }.

%FOR EVERY X,Y IN THE ARG
:- free(X).
free(X):- att(X,Y), in(X), in(Y).

%EVERY ATT IS DEFENDED BY SOMEONE OF THE SET
:- in(X), att(Y, X), not def(X, Y).
def(X, Y) :- in(Z), att(Z,Y), arg(X).

%ATT ALL ARGUMENTS NOT IN ARE ATT BY SOMEONE IN
:- arg(X), not in(X), not attNS(X).
attNS(X) :- in(Y), att(Y, X).

#show in/1.

//---------------------------------

4-Preferred Extensions (Find maximal admissible sets) MAAAAL
//---------------------------------