1-Conflict-Free Sets (Find sets of arguments where no argument attacks another within the set)
%INPUTS
arg(a). arg(b).
att(a, b). att(b, a).

%GEN SETS
{ in(X) : arg(X) }.

%FOR EVERY X,Y IN THE ARG
in(X) :- not att(X, Y), not att(Y, X), in(Y).



2-Admissible Sets (Find conflict-free sets where each argument is defended against attackers)
%INPUTS
arg(a). arg(b).
att(a, b). att(b, a).

%GEN SETS
{ in(X) : arg(X) }.

%FOR EVERY X,Y IN THE ARG
in(X) :- not att(X, Y), not att(Y, X), in(Y).

%EVERY ATT IS DEFENDED BY SOMEONE OF THE SET
in(X) :- att(Z,X), att(Y,Z), in(Y).



3-Stable Extensions (Find admissible sets that attack every argument not in the set)
%INPUTS
arg(a). arg(b).
att(a, b). att(b, a).

%GEN SETS
{ in(X) : arg(X) }.

%FOR EVERY X,Y IN THE ARG
in(X) :- not att(X, Y), not att(Y, X), in(Y).

%EVERY ATT IS DEFENDED BY SOMEONE OF THE SET
in(X) :- att(Z,X), att(Y,Z), in(Y).

%ATT ALL ARGUMENTS NOT IN ARE ATT BY SOMEONE IN
not in(X) :- att(Y,X), in(Y).



4-Preferred Extensions (Find maximal admissible sets)
%INPUTS
arg(a). arg(b).
att(a, b). att(b, a).

%GEN SETS
{ in(X) : arg(X) }.

%FOR EVERY X,Y IN THE ARG
in(X) :- freeConf(X)
freeConf(X) :- not att(X, Y), not att(Y, X), in(Y).

%EVERY ATT IS DEFENDED BY SOMEONE OF THE SET
in(X) :- def(X).
def(X) :- att(Z,X), att(Y,Z), in(Y).

%THERE IS NOTHING LEFT NOT IN SOLUTION SET
:- not in(X), attBySet(X), def(X)