1-Conflict-Free Sets (Find sets of arguments where no argument attacks another within the set)

% INPUTS CHECK
arg(a). arg(b). arg(c). arg(d). arg(e).
att(a, b). att(b, c). att(c, a). att(d,e).

%This generation rule is part of the guessing process, generating sets in(X) for all possible arguments X
{ in(X) : arg(X) }.

%Checks and filter that from each X and Y from in(), X can not attack Y
:- free(X).
free(X):- att(X,Y), in(X), in(Y).

#show in/1.

//---------------------------------

2-Admissible Sets (Find conflict-free sets where each argument is defended against attackers)

% INPUTS CHECK
arg(a). arg(b). arg(c). arg(d). arg(e).
att(a, b). att(b, c). att(c, a). att(d,e).

%This generation rule is part of the guessing process, generating sets in(X) for all possible arguments X
{ in(X) : arg(X) }.

%Checks and filter that from each X and Y from in(), X can not attack Y
:- free(X).
free(X):- att(X,Y), in(X), in(Y).

%Checks and filter that it is impossible to have an element X in in()
:- in(X), att(Y, X), not def(X, Y).
%If it is attacked and there is no other element within the set that defends it
def(X, Y) :- in(Z), att(Z,Y), arg(X).

#show in/1.

//---------------------------------

3-Stable Extensions (Find admissible sets that attack every argument not in the set)

% INPUTS CHECK
arg(a). arg(b). arg(c). arg(d). arg(e).
att(a, b). att(b, c). att(c, a). att(d,e).

%This generation rule is part of the guessing process, generating sets in(X) for all possible arguments X
{ in(X) : arg(X) }.

%Checks and filter that from each X and Y from in(), X can not attack Y
:- free(X).
free(X):- att(X,Y), in(X), in(Y).

%Checks and filter that it is impossible to have an element X in in()
:- in(X), att(Y, X), not def(X, Y).
%If it is attacked and there is no other element within the set that defends it
def(X, Y) :- in(Z), att(Z,Y), arg(X).

%Checks and filter that every element NOT in in()
:- arg(X), not in(X), not attNS(X).
%Has someone in in() that attacks him
attNS(X) :- in(Y), att(Y, X).

#show in/1.

//---------------------------------

4-Preferred Extensions (Find maximal admissible sets)

% INPUTS CHECK
arg(a). arg(b). arg(c). arg(d). arg(e).
att(a, b). att(b, c). att(c, a). att(d,e).

%This generation rule is part of the guessing process, generating sets in(X) for all possible arguments X
{ in(X) : arg(X) }.

%Checks and filter that from each X and Y from in(), X can not attack Y
:- free(X).
free(X):- att(X,Y), in(X), in(Y).

%Checks and filter that it is impossible to have an element X in in()
:- in(X), att(Y, X), not def(X, Y).
%If it is attacked and there is no other element within the set that defends it
def(X, Y) :- in(Z), att(Z,Y), arg(X).

%Checks that there is no empty sets
:- not non_empty_set.
non_empty_set :- in(_).

%Takes the maximal sets
#maximize { 1@1, X : in(X) }.

#show in/1.

//---------------------------------